import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder, StandardScaler
import tensorflow as tf
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense
from tensorflow.keras.optimizers import Adam

# Step 1: Load dataset
df = pd.read_csv("medium_data.csv")

# Step 2: Drop unnecessary columns
df.drop(columns=['id', 'url', 'title', 'subtitle', 'date'], inplace=True)

# Step 3: Create binary target column
df['popular'] = (df['claps'] >= 500).astype(int)

# Step 4: Encode 'publication'
label_encoder_pub = LabelEncoder()
df['publication'] = label_encoder_pub.fit_transform(df['publication'].astype(str))

# Step 5: Encode 'responses' (assuming values like 'Read', 'Not Read')
df['responses'] = df['responses'].map({'Read': 1, 'Not Read': 0})
df['responses'] = df['responses'].fillna(0)

# Step 6: Convert 'reading_time' to numeric
df['reading_time'] = pd.to_numeric(df['reading_time'], errors='coerce')
df['reading_time'] = df['reading_time'].fillna(df['reading_time'].mean())

# Step 7: Now drop rows where target is still missing
df.dropna(subset=['popular'], inplace=True)

# Step 8: Split features and target
X = df[['responses', 'reading_time', 'publication']]
y = df['popular']

# Debug: check remaining data size
print(f"Remaining rows after preprocessing: {df.shape[0]}")

# Step 9: Train-test split
X_train, X_test, y_train, y_test = train_test_split(
    X, y, test_size=0.2, random_state=42
)

# Step 10: Scale features
scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_train).astype('float32')
X_test_scaled = scaler.transform(X_test).astype('float32')

# Step 11: Build model
model = Sequential([
    Dense(16, activation='relu', input_shape=(X_train_scaled.shape[1],)),
    Dense(8, activation='relu'),
    Dense(1, activation='sigmoid')
])

# Step 12: Compile model
optimizer = Adam(learning_rate=1e-4, clipnorm=1.0)
model.compile(
    optimizer=optimizer,
    loss='binary_crossentropy',
    metrics=['accuracy', 'mse', 'mae']
)

# Step 13: Train model
history = model.fit(
    X_train_scaled, y_train,
    epochs=20,
    batch_size=4,
    validation_data=(X_test_scaled, y_test),
    verbose=1
)

# Step 14: Evaluate model
loss, accuracy, mse, mae = model.evaluate(X_test_scaled, y_test, verbose=0)

print(f"Binary Crossentropy Loss: {loss:.4f}")
print(f"Test Accuracy: {accuracy:.4f}")
print(f"Mean Squared Error (MSE): {mse:.4f}")
print(f"Mean Absolute Error (MAE): {mae:.4f}")
