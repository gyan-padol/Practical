import numpy as np
import matplotlib.pyplot as plt
import tensorflow as tf
from tensorflow.keras.preprocessing import image
from tensorflow.keras.applications import VGG16
from tensorflow.keras.applications.vgg16 import preprocess_input, decode_predictions

# Load the VGG16 model pre-trained on ImageNet
model = VGG16(weights='imagenet', include_top=True)

# Set the path to your image file
img_path = 'D:\Snapchat\Snapchat-43710172.jpg'  # Make sure this image exists in the same folder

# Load the image with target size required by VGG16
img = image.load_img(img_path, target_size=(224, 224))

# Display the image
plt.imshow(img)
plt.axis('off')
plt.title("Input Image")
plt.show()

# Convert the image to a numpy array
img_array = image.img_to_array(img)

# Expand dimensions to match the model input shape
img_array = np.expand_dims(img_array, axis=0)

# Preprocess the image using VGG16-specific preprocessing
img_array = preprocess_input(img_array)

# Predict the class
predictions = model.predict(img_array)

# Decode predictions to readable labels
decoded_predictions = decode_predictions(predictions, top=5)[0]

# Print the top 5 predictions
print("\nTop Predictions:")
for label, description, probability in decoded_predictions:
    print(f"{description}: {probability:.4f}")
